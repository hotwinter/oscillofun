from PIL import Imageimport waveimport structdef resize_img(im):  if(im.size[0] > MAX_SIZE or im.size[1] > MAX_SIZE):    minimum = min(im.size[0], im.size[1])    if(minimum == im.size[0]):      ratio = float(im.size[0]) / im.size[1]      width = int(ratio * MAX_SIZE)      height = MAX_SIZE    else:      ratio = float(im.size[1]) / im.size[0]      width = MAX_SIZE      height = int(ratio * MAX_SIZE)    return im.resize((width, height))  return imdef trace_img(im, out):  num = 0  for i in range(im.size[0]):    pixel = im.getpixel((i, 0))    for j in range(im.size[1]):      pix = im.getpixel((i, j))      if(pix != pixel):        pixel = pix        out.putpixel((i, j), 0)  for i in range(im.size[1]):    pixel = im.getpixel((0, i))    for j in range(im.size[0]):      pix = im.getpixel((j, i))      if(pix != pixel):        pixel = pix        out.putpixel((j, i), 0)def write_to_file(out):  num = 0.0  for i in range(out.size[1]):    for j in range(out.size[0]):      pix = out.getpixel((j, i))      if(pix == 0):        channel1 = MAX_AMPLITUDE * (j - out.size[0] / 2)        channel2 = MAX_AMPLITUDE * (i - out.size[1] / 2)        packed_channel1 = struct.pack('h', channel1)        packed_channel2 = struct.pack('h', channel2)        samples.append(packed_channel1)        samples.append(packed_channel2)filename = raw_input("Enter input file name: ")outfile = raw_input("Enter output file name: ")im = Image.open(filename)im = im.convert("1")MAX_SIZE = 1000SAMPLE_RATE = 1000MAX_AMPLITUDE = 10im = resize_img(im)print im.sizeout = Image.new("1", im.size, "white")trace_img(im, out)outfile = wave.open(outfile, "wb")outfile.setparams((2, 2, SAMPLE_RATE, 0, 'NONE', 'not compressed'))samples = []write_to_file(out)sample_str = ''.join(samples)outfile.writeframes(sample_str)outfile.close()im.show()out.show()